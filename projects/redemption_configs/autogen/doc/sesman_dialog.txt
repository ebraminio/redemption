DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN


       cpp name       |       sesman / passthrough name

cfg::globals::front_connection_time ⇒ front_connection_time   [std::chrono::milliseconds]
    from incoming connection to "up_and_running" state
cfg::globals::target_connection_time ⇒ target_connection_time   [std::chrono::milliseconds]
    from Module rdp creation to "up_and_running" state
cfg::globals::nla_auth_user ⇒ nla_login   [std::string]
cfg::globals::auth_user ⇔ login   [std::string]
cfg::globals::host ⇔ ip_client   [std::string]
cfg::globals::target ⇒ ip_target   [std::string]
cfg::globals::target_device ⇐ target_device   [std::string]
cfg::globals::device_id ⇐ device_id   [std::string]
cfg::globals::primary_user_id ⇐ primary_user_id   [std::string]
cfg::globals::target_user ⇔ target_login   [std::string]
cfg::globals::target_application ⇐ target_application   [std::string]
cfg::globals::target_application_account ⇐ target_application_account   [std::string]
cfg::globals::target_application_password ⇐ target_application_password   [std::string]
cfg::globals::inactivity_timeout ⇐ globals:inactivity_timeout   [std::chrono::seconds]
    No automatic disconnection due to inactivity, timer is set on target session.
    If value is between 1 and 30, then 30 is used.
    If value is set to 0, then value set in "Session timeout" (in "RDP Proxy" configuration option) is used.
cfg::globals::trace_type ⇐ trace_type   [TraceType]
    Session record options.
      0: No encryption (faster).
      1: No encryption, with checksum.
      2: Encryption enabled.
    When session records are encrypted, they can be read only by the WAB where they have been generated.
cfg::globals::is_rec ⇐ is_rec   [bool]
cfg::globals::unicode_keyboard_event_support ⇐ unicode_keyboard_event_support   [bool]
cfg::globals::mod_recv_timeout ⇐ mod_recv_timeout   [std::chrono::milliseconds]

cfg::session_log::keyboard_input_masking_level ⇐ session_log:keyboard_input_masking_level   [KeyboardInputMaskingLevel]
    Keyboard Input Masking Level:
      0: keyboard input are not masked
      1: only passwords are masked
      2: passwords and unidentified texts are masked
      3: keyboard inputs are not logged

cfg::client::keyboard_layout ⇒ keyboard_layout   [unsigned]
cfg::client::disable_tsk_switch_shortcuts ⇐ disable_tsk_switch_shortcuts   [bool]
    If enabled, ignore CTRL+ALT+DEL and CTRL+SHIFT+ESCAPE (or the equivalents) keyboard sequences.

cfg::mod_rdp::disabled_orders ⇐ mod_rdp:disabled_orders   [std::string]
    Disables supported drawing orders:
       0: DstBlt
       1: PatBlt
       2: ScrBlt
       3: MemBlt
       4: Mem3Blt
       8: LineTo
      15: MultiDstBlt
      16: MultiPatBlt
      17: MultiScrBlt
      18: MultiOpaqueRect
      22: Polyline
      25: EllipseSC
      27: GlyphIndex
    
cfg::mod_rdp::enable_nla ⇐ mod_rdp:enable_nla   [bool]
    NLA authentication in secondary target.
cfg::mod_rdp::enable_kerberos ⇐ mod_rdp:enable_kerberos   [bool]
    If enabled, NLA authentication will try Kerberos before NTLM.
    (if enable_nla is disabled, this value is ignored).
cfg::mod_rdp::tls_min_level ⇐ mod_rdp:tls_min_level   [uint32_t]
    Minimal incoming TLS level 0=TLSv1, 1=TLSv1.1, 2=TLSv1.2, 3=TLSv1.3
cfg::mod_rdp::tls_max_level ⇐ mod_rdp:tls_max_level   [uint32_t]
    Maximal incoming TLS level 0=no restriction, 1=TLSv1.1, 2=TLSv1.2, 3=TLSv1.3
cfg::mod_rdp::cipher_string ⇐ mod_rdp:cipher_string   [std::string]
    TLSv1.2 additional ciphers supported by client, default is empty to apply system-wide configuration (SSL security level 2), ALL for support of all ciphers to ensure highest compatibility with target servers.
cfg::mod_rdp::show_common_cipher_list ⇐ mod_rdp:show_common_cipher_list   [bool]
    Show common cipher list supported by client and server
cfg::mod_rdp::allow_channels ⇐ allow_channels   [std::string]
    List of enabled (static) virtual channel (example: channel1,channel2,etc). Character * only, activate all with low priority.
cfg::mod_rdp::deny_channels ⇐ deny_channels   [std::string]
    List of disabled (static) virtual channel (example: channel1,channel2,etc). Character * only, deactivate all with low priority.
cfg::mod_rdp::allowed_dynamic_channels ⇐ mod_rdp:allowed_dynamic_channels   [std::string]
    List of enabled dynamic virtual channel (example: channel1,channel2,etc). Character * only, activate all.
cfg::mod_rdp::denied_dynamic_channels ⇐ mod_rdp:denied_dynamic_channels   [std::string]
    List of disabled dynamic virtual channel (example: channel1,channel2,etc). Character * only, deactivate all.
cfg::mod_rdp::server_redirection_support ⇐ mod_rdp:server_redirection_support   [bool]
    Enables Server Redirection Support.
cfg::mod_rdp::load_balance_info ⇐ mod_rdp:load_balance_info   [std::string]
    Load balancing information
cfg::mod_rdp::bogus_sc_net_size ⇐ rdp_bogus_sc_net_size   [bool]
    Needed to connect with VirtualBox, based on bogus TS_UD_SC_NET data block.
cfg::mod_rdp::proxy_managed_drives ⇐ proxy_managed_drives   [std::string]
cfg::mod_rdp::ignore_auth_channel ⇐ ignore_auth_channel   [bool]
cfg::mod_rdp::alternate_shell ⇐ alternate_shell   [std::string]
cfg::mod_rdp::shell_arguments ⇐ shell_arguments   [std::string]
cfg::mod_rdp::shell_working_directory ⇐ shell_working_directory   [std::string]
cfg::mod_rdp::use_client_provided_alternate_shell ⇐ mod_rdp:use_client_provided_alternate_shell   [bool]
    As far as possible, use client-provided initial program (Alternate Shell)
cfg::mod_rdp::use_client_provided_remoteapp ⇐ mod_rdp:use_client_provided_remoteapp   [bool]
    As far as possible, use client-provided remote program (RemoteApp)
cfg::mod_rdp::use_native_remoteapp_capability ⇐ mod_rdp:use_native_remoteapp_capability   [bool]
    As far as possible, use native RemoteApp capability
cfg::mod_rdp::enable_session_probe ⇐ mod_rdp:enable_session_probe   [bool]
cfg::mod_rdp::session_probe_use_clipboard_based_launcher ⇐ mod_rdp:session_probe_use_clipboard_based_launcher   [bool]
    Minimum supported server : Windows Server 2008.
    Clipboard redirection should be remain enabled on Terminal Server.
cfg::mod_rdp::session_probe_enable_launch_mask ⇐ mod_rdp:session_probe_enable_launch_mask   [bool]
cfg::mod_rdp::session_probe_on_launch_failure ⇐ mod_rdp:session_probe_on_launch_failure   [SessionProbeOnLaunchFailure]
    Behavior on failure to launch Session Probe.
      0: ignore failure and continue.
      1: disconnect user.
      2: reconnect without Session Probe.
cfg::mod_rdp::session_probe_launch_timeout ⇐ mod_rdp:session_probe_launch_timeout   [std::chrono::milliseconds]
    This parameter is used if session_probe_on_launch_failure is 1 (disconnect user).
    0 to disable timeout.
cfg::mod_rdp::session_probe_launch_fallback_timeout ⇐ mod_rdp:session_probe_launch_fallback_timeout   [std::chrono::milliseconds]
    This parameter is used if session_probe_on_launch_failure is 0 (ignore failure and continue) or 2 (reconnect without Session Probe).
    0 to disable timeout.
cfg::mod_rdp::session_probe_start_launch_timeout_timer_only_after_logon ⇐ mod_rdp:session_probe_start_launch_timeout_timer_only_after_logon   [bool]
    Minimum supported server : Windows Server 2008.
cfg::mod_rdp::session_probe_keepalive_timeout ⇐ mod_rdp:session_probe_keepalive_timeout   [std::chrono::milliseconds]
cfg::mod_rdp::session_probe_on_keepalive_timeout ⇐ mod_rdp:session_probe_on_keepalive_timeout   [SessionProbeOnKeepaliveTimeout]
      0: ignore and continue
      1: disconnect user
      2: freeze connection and wait
cfg::mod_rdp::session_probe_end_disconnected_session ⇐ mod_rdp:session_probe_end_disconnected_session   [bool]
    End automatically a disconnected session.
    This option is recommended for Web applications running in Desktop mode.
    Session Probe must be enabled to use this feature.
cfg::mod_rdp::session_probe_enable_log ⇐ mod_rdp:session_probe_enable_log   [bool]
cfg::mod_rdp::session_probe_enable_log_rotation ⇐ mod_rdp:session_probe_enable_log_rotation   [bool]
cfg::mod_rdp::session_probe_log_level ⇐ mod_rdp:session_probe_log_level   [SessionProbeLogLevel]
      1: Fatal
      2: Error
      3: Info
      4: Warning
      5: Debug
      6: Detail
cfg::mod_rdp::session_probe_disconnected_application_limit ⇐ mod_rdp:session_probe_disconnected_application_limit   [std::chrono::milliseconds]
    (Deprecated!) This policy setting allows you to configure a time limit for disconnected application sessions.
    0 to disable timeout.
cfg::mod_rdp::session_probe_disconnected_session_limit ⇐ mod_rdp:session_probe_disconnected_session_limit   [std::chrono::milliseconds]
    This policy setting allows you to configure a time limit for disconnected Terminal Services sessions.
    0 to disable timeout.
cfg::mod_rdp::session_probe_idle_session_limit ⇐ mod_rdp:session_probe_idle_session_limit   [std::chrono::milliseconds]
    This parameter allows you to specify the maximum amount of time that an active Terminal Services session can be idle (without user input) before it is automatically locked by Session Probe.
    0 to disable timeout.
cfg::mod_rdp::session_probe_clipboard_based_launcher_clipboard_initialization_delay ⇐ mod_rdp:session_probe_clipboard_based_launcher_clipboard_initialization_delay   [std::chrono::milliseconds]
cfg::mod_rdp::session_probe_clipboard_based_launcher_start_delay ⇐ mod_rdp:session_probe_clipboard_based_launcher_start_delay   [std::chrono::milliseconds]
cfg::mod_rdp::session_probe_clipboard_based_launcher_long_delay ⇐ mod_rdp:session_probe_clipboard_based_launcher_long_delay   [std::chrono::milliseconds]
cfg::mod_rdp::session_probe_clipboard_based_launcher_short_delay ⇐ mod_rdp:session_probe_clipboard_based_launcher_short_delay   [std::chrono::milliseconds]
cfg::mod_rdp::session_probe_launcher_abort_delay ⇐ mod_rdp:session_probe_launcher_abort_delay   [std::chrono::milliseconds]
cfg::mod_rdp::session_probe_enable_crash_dump ⇐ mod_rdp:session_probe_enable_crash_dump   [bool]
cfg::mod_rdp::session_probe_handle_usage_limit ⇐ mod_rdp:session_probe_handle_usage_limit   [uint32_t]
cfg::mod_rdp::session_probe_memory_usage_limit ⇐ mod_rdp:session_probe_memory_usage_limit   [uint32_t]
cfg::mod_rdp::session_probe_end_of_session_check_delay_time ⇐ mod_rdp:session_probe_end_of_session_check_delay_time   [std::chrono::milliseconds]
cfg::mod_rdp::session_probe_ignore_ui_less_processes_during_end_of_session_check ⇐ mod_rdp:session_probe_ignore_ui_less_processes_during_end_of_session_check   [bool]
cfg::mod_rdp::session_probe_childless_window_as_unidentified_input_field ⇐ mod_rdp:session_probe_childless_window_as_unidentified_input_field   [bool]
cfg::mod_rdp::session_probe_update_disabled_features ⇐ mod_rdp:session_probe_update_disabled_features   [bool]
cfg::mod_rdp::session_probe_disabled_features ⇐ mod_rdp:session_probe_disabled_features   [SessionProbeDisabledFeature]
      0x000: none
      0x001: Java Access Bridge
      0x002: MS Active Accessbility
      0x004: MS UI Automation
      0x010: Inspect Edge location URL
      0x020: Inspect Chrome Address/Search bar
      0x040: Inspect Firefox Address/Search bar
      0x080: Monitor Internet Explorer event
      0x100: Inspect group membership of user
    Note: values can be added (enable all: 0x001 + 0x002 + 0x004 + 0x010 + 0x020 + 0x040 + 0x080 + 0x100 = 0x1f7)
cfg::mod_rdp::session_probe_bestsafe_integration ⇐ mod_rdp:session_probe_bestsafe_integration   [bool]
cfg::mod_rdp::session_probe_on_account_manipulation ⇐ mod_rdp:session_probe_on_account_manipulation   [SessionProbeOnAccountManipulation]
    For targets running WALLIX BestSafe only.
      0: User action will be accepted
      1: (Same thing as 'allow') 
      2: User action will be rejected
cfg::mod_rdp::session_probe_alternate_directory_environment_variable ⇐ mod_rdp:session_probe_alternate_directory_environment_variable   [std::string(maxlen=3)]
    The name of the environment variable pointing to the alternative directory to launch Session Probe.
    If empty, the environment variable TMP will be used.
cfg::mod_rdp::session_probe_public_session ⇐ mod_rdp:session_probe_public_session   [bool]
    If enabled, disconnected session can be recovered by a different primary user.
cfg::mod_rdp::server_cert_store ⇐ mod_rdp:server_cert_store   [bool]
    Keep known server certificates on WAB
cfg::mod_rdp::server_cert_check ⇐ mod_rdp:server_cert_check   [ServerCertCheck]
    Behavior of certificates check.
      0: fails if certificates doesn't match or miss.
      1: fails if certificate doesn't match, succeed if no known certificate.
      2: succeed if certificates exists (not checked), fails if missing.
      3: always succeed.
    System errors like FS access rights issues or certificate decode are always check errors leading to connection rejection.
cfg::mod_rdp::server_access_allowed_message ⇐ mod_rdp:server_access_allowed_message   [ServerNotification]
    Warn if check allow connexion to server.
      0x0: nobody
      0x1: message sent to syslog
      0x2: User notified (through proxy interface)
      0x4: admin notified (wab notification)
    Note: values can be added (enable all: 0x1 + 0x2 + 0x4 = 0x7)
cfg::mod_rdp::server_cert_create_message ⇐ mod_rdp:server_cert_create_message   [ServerNotification]
    Warn that new server certificate file was created.
      0x0: nobody
      0x1: message sent to syslog
      0x2: User notified (through proxy interface)
      0x4: admin notified (wab notification)
    Note: values can be added (enable all: 0x1 + 0x2 + 0x4 = 0x7)
cfg::mod_rdp::server_cert_success_message ⇐ mod_rdp:server_cert_success_message   [ServerNotification]
    Warn that server certificate file was successfully checked.
      0x0: nobody
      0x1: message sent to syslog
      0x2: User notified (through proxy interface)
      0x4: admin notified (wab notification)
    Note: values can be added (enable all: 0x1 + 0x2 + 0x4 = 0x7)
cfg::mod_rdp::server_cert_failure_message ⇐ mod_rdp:server_cert_failure_message   [ServerNotification]
    Warn that server certificate file checking failed.
      0x0: nobody
      0x1: message sent to syslog
      0x2: User notified (through proxy interface)
      0x4: admin notified (wab notification)
    Note: values can be added (enable all: 0x1 + 0x2 + 0x4 = 0x7)
cfg::mod_rdp::enable_rdpdr_data_analysis ⇐ enable_rdpdr_data_analysis   [bool]
cfg::mod_rdp::wabam_uses_translated_remoteapp ⇐ mod_rdp:wabam_uses_translated_remoteapp   [bool]
cfg::mod_rdp::enable_server_cert_external_validation ⇐ enable_server_cert_external_validation   [bool]
cfg::mod_rdp::server_cert ⇒ server_cert   [std::string]
cfg::mod_rdp::server_cert_response ⇐ server_cert_response   [std::string]
    empty string for wait, 'Ok' or error message
cfg::mod_rdp::enable_remotefx ⇐ mod_rdp:enable_remotefx   [bool]
    Enables support of the remoteFX codec.
cfg::mod_rdp::enable_restricted_admin_mode ⇐ mod_rdp:enable_restricted_admin_mode   [bool]
    Connect to the server in Restricted Admin mode.
    This mode must be supported by the server (available from Windows Server 2012 R2), otherwise, connection will fail.
    NLA must be enabled.
cfg::mod_rdp::force_smartcard_authentication ⇐ mod_rdp:force_smartcard_authentication   [bool]
    NLA will be disabled.
    Target must be set for interactive login, otherwise server connection may not be guaranteed.
    Smartcard device must be available on client desktop.
    Smartcard redirection (Proxy option RDP_SMARTCARD) must be enabled on service.
cfg::mod_rdp::enable_ipv6 ⇐ mod_rdp:enable_ipv6   [bool]
    Enable target connection on ipv6
cfg::mod_rdp::mode_console ⇐ mod_rdp:mode_console   [RdpModeConsole ⇐ std::string]
    Console mode management for targets on Windows Server 2003 (requested with /console or /admin mstsc option)
      allow: Forward Console mode request from client to the target.
      force: Force Console mode on target regardless of client request.
      forbid: Block Console mode request from client.
cfg::mod_rdp::auto_reconnection_on_losing_target_link ⇐ mod_rdp:auto_reconnection_on_losing_target_link   [bool]
cfg::mod_rdp::forward_client_build_number ⇐ mod_rdp:forward_client_build_number   [bool]
    Forward the build number advertised by the client to the server. If forwarding is disabled a default (static) build number will be sent to the server.
cfg::mod_rdp::bogus_monitor_layout_treatment ⇐ mod_rdp:bogus_monitor_layout_treatment   [bool]
    To resolve the session freeze issue with Windows 7/Windows Server 2008 target.
<sesman only> ⇐ mod_rdp:krb_armoring_account   [std::string]
    Account to be used for armoring Kerberos tickets. Must be in the form 'account_name@domain_name[@device_name]'. If account resolution succeeds the username and password associated with this account will be used; otherwise the below fallback username and password will be used instead.
<sesman only> ⇐ mod_rdp:krb_armoring_realm   [std::string]
    Realm to be used for armoring Kerberos tickets. 
<sesman only> ⇐ mod_rdp:krb_armoring_fallback_user   [std::string]
    Fallback username to be used for armoring Kerberos tickets. 
<sesman only> ⇐ mod_rdp:krb_armoring_fallback_password   [std::string]
    Fallback password to be used for armoring Kerberos tickets.
cfg::mod_rdp::effective_krb_armoring_user ⇐ effective_krb_armoring_user   [std::string]
    Effective username to be used for armoring Kerberos tickets.
cfg::mod_rdp::effective_krb_armoring_password ⇐ effective_krb_armoring_password   [std::string]
    Effective password to be used for armoring Kerberos tickets.

cfg::mod_vnc::clipboard_up ⇐ clipboard_up   [bool]
    Enable or disable the clipboard from client (client to server).
cfg::mod_vnc::clipboard_down ⇐ clipboard_down   [bool]
    Enable or disable the clipboard from server (server to client).
cfg::mod_vnc::server_clipboard_encoding_type ⇐ vnc_server_clipboard_encoding_type   [ClipboardEncodingType ⇐ std::string]
    VNC server clipboard data encoding type.
cfg::mod_vnc::bogus_clipboard_infinite_loop ⇐ vnc_bogus_clipboard_infinite_loop   [VncBogusClipboardInfiniteLoop]
      0: delayed
      1: duplicated
      2: continued
cfg::mod_vnc::server_is_macos ⇐ mod_vnc:server_is_macos   [bool]
cfg::mod_vnc::server_unix_alt ⇐ mod_vnc:server_unix_alt   [bool]
cfg::mod_vnc::support_cursor_pseudo_encoding ⇐ mod_vnc:support_cursor_pseudo_encoding   [bool]
cfg::mod_vnc::enable_ipv6 ⇐ mod_vnc:enable_ipv6   [bool]
    Enable target connection on ipv6


cfg::file_verification::enable_up ⇐ file_verification:enable_up   [bool]
    Enable use of ICAP service for file verification on upload.
cfg::file_verification::enable_down ⇐ file_verification:enable_down   [bool]
    Enable use of ICAP service for file verification on download.
cfg::file_verification::clipboard_text_up ⇐ file_verification:clipboard_text_up   [bool]
    Verify text data via clipboard from client to server.
    File verification on upload must be enabled via option Enable up.
cfg::file_verification::clipboard_text_down ⇐ file_verification:clipboard_text_down   [bool]
    Verify text data via clipboard from server to client
    File verification on download must be enabled via option Enable down.
cfg::file_verification::block_invalid_file_up ⇐ file_verification:block_invalid_file_up   [bool]
    Block file transfer from client to server on invalid file verification.
    File verification on upload must be enabled via option Enable up.
cfg::file_verification::block_invalid_file_down ⇐ file_verification:block_invalid_file_down   [bool]
    Block file transfer from server to client on invalid file verification.
    File verification on download must be enabled via option Enable down.
cfg::file_verification::log_if_accepted ⇐ file_verification:log_if_accepted   [bool]
cfg::file_verification::max_file_size_rejected ⇐ file_verification:max_file_size_rejected   [uint32_t]
    If option Block invalid file (up or down) is enabled, automatically reject file with greater filesize (in megabytes).
    Warning: This value affects the RAM used by the session.

cfg::file_storage::store_file ⇐ file_storage:store_file   [RdpStoreFile ⇐ std::string]
    Enable storage of transferred files (via RDP Clipboard).
      never: Never store transferred files.
      always: Always store transferred files.
      on_invalid_verification: Transferred files are stored only if file verification is invalid. File verification by ICAP service must be enabled (in section file_verification).



cfg::mod_replay::replay_on_loop ⇐ replay_on_loop   [bool]
    0 - replay once, 1 - loop replay


cfg::video::hash_path ⇐ hash_path   [::configs::spec_types::directory_path]
cfg::video::record_tmp_path ⇐ record_tmp_path   [::configs::spec_types::directory_path]
cfg::video::record_path ⇐ record_path   [::configs::spec_types::directory_path]
cfg::video::rt_display ⇐ rt_display   [bool]

cfg::capture::record_filebase ⇐ record_filebase   [std::string]
    basename without extension
cfg::capture::record_subdirectory ⇐ record_subdirectory   [std::string]
    subdirectory of record_path (video section)
cfg::capture::fdx_path ⇒ fdx_path   [std::string]
cfg::capture::disable_keyboard_log ⇐ capture:disable_keyboard_log   [KeyboardLogFlagsCP]
    Disable keyboard log:
    (Please see also "Keyboard input masking level" in "session_log" section of "Connection Policy".)
      0x0: none
      0x1: disable keyboard log in syslog
      0x2: disable keyboard log in recorded sessions
    Note: values can be added (disable all: 0x1 + 0x2 = 0x3)

cfg::crypto::encryption_key ⇐ encryption_key   [std::array<unsigned char, 32>]
cfg::crypto::sign_key ⇐ sign_key   [std::array<unsigned char, 32>]




cfg::translation::language ⇐ language   [Language ⇐ std::string]
cfg::translation::login_language ⇒ login_language   [LoginLanguage ⇒ std::string]


cfg::context::psid ⇒ psid   [std::string]
    Proxy session log id
cfg::context::opt_bpp ⇒ bpp   [ColorDepth]
    Specifies the maximum color resolution (color depth) for client session:
      8: 8-bit
      15: 15-bit 555 RGB mask (5 bits for red, 5 bits for green, and 5 bits for blue)
      16: 16-bit 565 RGB mask (5 bits for red, 6 bits for green, and 5 bits for blue)
      24: 24-bit RGB mask (8 bits for red, 8 bits for green, and 8 bits for blue)
      32: 32-bit RGB mask (8 bits for alpha, 8 bits for red, 8 bits for green, and 8 bits for blue)
cfg::context::opt_height ⇒ height   [uint16_t]
cfg::context::opt_width ⇒ width   [uint16_t]
cfg::context::selector ⇐ selector   [bool]
cfg::context::selector_current_page ⇔ selector_current_page   [unsigned]
cfg::context::selector_device_filter ⇒ selector_device_filter   [std::string]
cfg::context::selector_group_filter ⇒ selector_group_filter   [std::string]
cfg::context::selector_proto_filter ⇒ selector_proto_filter   [std::string]
cfg::context::selector_lines_per_page ⇔ selector_lines_per_page   [unsigned]
cfg::context::selector_number_of_pages ⇐ selector_number_of_pages   [unsigned]
cfg::context::target_password ⇔ target_password   [std::string]
cfg::context::target_host ⇔ target_host   [std::string]
cfg::context::target_str ⇐ target_str   [std::string]
cfg::context::target_service ⇐ target_service   [std::string]
cfg::context::target_port ⇐ target_port   [unsigned]
cfg::context::target_protocol ⇐ proto_dest   [std::string]
cfg::context::password ⇔ password   [std::string]
cfg::context::nla_password_hash ⇐ nla_password_hash   [std::string]
cfg::context::reporting ⇒ reporting   [std::string]
cfg::context::auth_channel_answer ⇐ auth_channel_answer   [std::string]
cfg::context::auth_channel_target ⇒ auth_channel_target   [std::string]
cfg::context::message ⇐ message   [std::string]
cfg::context::accept_message ⇒ accept_message   [bool]
cfg::context::display_message ⇒ display_message   [bool]
cfg::context::rejected ⇐ rejected   [std::string]
cfg::context::keepalive ⇐ keepalive   [bool]
cfg::context::session_id ⇐ session_id   [std::string]
cfg::context::end_date_cnx ⇐ timeclose   [std::chrono::seconds]
cfg::context::real_target_device ⇒ real_target_device   [std::string]
cfg::context::authentication_challenge ⇐ authentication_challenge   [bool]
cfg::context::ticket ⇒ ticket   [std::string]
cfg::context::comment ⇒ comment   [std::string]
cfg::context::duration ⇒ duration   [std::string]
cfg::context::duration_max ⇐ duration_max   [std::chrono::minutes]
cfg::context::waitinforeturn ⇒ waitinforeturn   [std::string]
cfg::context::showform ⇐ showform   [bool]
cfg::context::formflag ⇐ formflag   [unsigned]
cfg::context::module ⇔ module   [ModuleName ⇔ std::string]
cfg::context::proxy_opt ⇐ proxy_opt   [std::string]
cfg::context::pattern_kill ⇐ pattern_kill   [std::string]
cfg::context::pattern_notify ⇐ pattern_notify   [std::string]
cfg::context::opt_message ⇐ opt_message   [std::string]
cfg::context::login_message ⇐ login_message   [std::string]
cfg::context::session_probe_outbound_connection_monitoring_rules ⇐ context:session_probe_outbound_connection_monitoring_rules   [std::string]
    Comma-separated rules (Ex.: $deny:192.168.0.0/24:5900,$allow:host.domain.net:3389,$allow:192.168.0.110:21)
    (Ex. for backwards compatibility only: 10.1.0.0/16:22)
    Session Probe must be enabled to use this feature.
cfg::context::session_probe_process_monitoring_rules ⇐ context:session_probe_process_monitoring_rules   [std::string]
    Comma-separated rules (Ex.: $deny:Taskmgr)
    @ = All child processes of Bastion Application (Ex.: $deny:@)
    Session Probe must be enabled to use this feature.
cfg::context::session_probe_extra_system_processes ⇐ context:session_probe_extra_system_processes   [std::string]
    Comma-separated extra system processes (Ex.: dllhos.exe,TSTheme.exe)
cfg::context::session_probe_windows_of_these_applications_as_unidentified_input_field ⇐ context:session_probe_windows_of_these_applications_as_unidentified_input_field   [std::string]
    Comma-separated processes (Ex.: chrome.exe,ngf.exe)
cfg::context::disconnect_reason ⇐ disconnect_reason   [std::string]
cfg::context::disconnect_reason_ack ⇒ disconnect_reason_ack   [bool]
cfg::context::recording_started ⇒ recording_started   [bool]
cfg::context::rt_ready ⇔ rt_ready   [bool]
cfg::context::auth_command ⇐ auth_command   [std::string]
cfg::context::auth_notify ⇒ auth_notify   [std::string]
cfg::context::auth_notify_rail_exec_flags ⇒ auth_notify_rail_exec_flags   [unsigned]
cfg::context::auth_notify_rail_exec_exe_or_file ⇒ auth_notify_rail_exec_exe_or_file   [std::string]
cfg::context::auth_command_rail_exec_exec_result ⇐ auth_command_rail_exec_exec_result   [uint16_t]
cfg::context::auth_command_rail_exec_flags ⇐ auth_command_rail_exec_flags   [uint16_t]
cfg::context::auth_command_rail_exec_original_exe_or_file ⇐ auth_command_rail_exec_original_exe_or_file   [std::string]
cfg::context::auth_command_rail_exec_exe_or_file ⇐ auth_command_rail_exec_exe_or_file   [std::string]
cfg::context::auth_command_rail_exec_working_dir ⇐ auth_command_rail_exec_working_dir   [std::string]
cfg::context::auth_command_rail_exec_arguments ⇐ auth_command_rail_exec_arguments   [std::string]
cfg::context::auth_command_rail_exec_account ⇐ auth_command_rail_exec_account   [std::string]
cfg::context::auth_command_rail_exec_password ⇐ auth_command_rail_exec_password   [std::string]
cfg::context::rail_disconnect_message_delay ⇐ context:rail_disconnect_message_delay   [std::chrono::milliseconds]
    Delay before showing disconnect message after the last RemoteApp window is closed.
cfg::context::use_session_probe_to_launch_remote_program ⇐ context:use_session_probe_to_launch_remote_program   [bool]
    Use Session Probe to launch Remote Program as much as possible.
cfg::context::session_probe_launch_error_message ⇒ session_probe_launch_error_message   [std::string]
cfg::context::is_wabam ⇐ is_wabam   [bool]
cfg::context::pm_response ⇐ pm_response   [std::string]
cfg::context::pm_request ⇒ pm_request   [std::string]
cfg::context::native_session_id ⇒ native_session_id   [uint32_t]
cfg::context::rd_shadow_available ⇒ rd_shadow_available   [bool]
cfg::context::rd_shadow_userdata ⇔ rd_shadow_userdata   [std::string]
cfg::context::rd_shadow_type ⇐ rd_shadow_type   [std::string]
cfg::context::rd_shadow_invitation_error_code ⇒ rd_shadow_invitation_error_code   [uint32_t]
cfg::context::rd_shadow_invitation_error_message ⇒ rd_shadow_invitation_error_message   [std::string]
cfg::context::rd_shadow_invitation_id ⇒ rd_shadow_invitation_id   [std::string]
cfg::context::rd_shadow_invitation_addr ⇒ rd_shadow_invitation_addr   [std::string]
cfg::context::rd_shadow_invitation_port ⇒ rd_shadow_invitation_port   [uint16_t]
cfg::context::smartcard_login ⇒ smartcard_login   [std::string]
cfg::context::banner_message ⇐ banner_message   [std::string]
cfg::context::banner_type ⇐ banner_type   [BannerType]
      0: info
      1: warn
      2: alert


